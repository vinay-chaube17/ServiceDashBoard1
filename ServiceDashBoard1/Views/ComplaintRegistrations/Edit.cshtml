@model ServiceDashBoard1.Models.ComplaintRegistration


@{
    var selectedSubProblems = ViewBag.SelectedSubProblems ?? "";  // Null hone pe empty string set kar raha hai
    var userRole = Context.Session.GetString("Role")?.Trim().ToLower();
}

<h1 class="text-center mb-4">
    <i class="bi bi-pencil-square text-warning me-2 fs-2"></i> Edit Complaint
</h1>
<hr/>

<div class="container my-5">
    <div class="card shadow-lg rounded-4 p-4">

        <form asp-action="Edit" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
            <input type="hidden" asp-for="Id" />

            <!-- Machine Serial Number -->
            <div class="mb-3">
                <label asp-for="MachineSerialNo" class="form-label fw-semibold">Machine Serialno.</label>
                <input asp-for="MachineSerialNo" class="form-control" readonly />
                <span asp-validation-for="MachineSerialNo" class="text-danger"></span>
            </div>

            <!-- Company Name -->
            <div class="mb-3">
                <label asp-for="CompanyName" class="form-label fw-semibold">Company Name</label>
                <input asp-for="CompanyName" class="form-control" readonly />
                <span asp-validation-for="CompanyName" class="text-danger"></span>
            </div>

            <!-- Email -->
            <div class="mb-3">
                <label asp-for="Email" class="form-label fw-semibold"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <!-- Phone Number -->
            <div class="mb-3">
                <label asp-for="PhoneNo" class="form-label fw-semibold"></label>
                <input asp-for="PhoneNo" class="form-control" />
                <span asp-validation-for="PhoneNo" class="text-danger"></span>
            </div>

            <!-- Address -->
            <div class="mb-3">
                <label asp-for="Address" class="form-label fw-semibold"></label>
                <input asp-for="Address" class="form-control" readonly />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <!-- Contact Person -->
            <div class="mb-3">
                <label asp-for="ContactPerson" class="form-label fw-semibold">Contact Person</label>
                <input asp-for="ContactPerson" class="form-control" />
                <span asp-validation-for="ContactPerson" class="text-danger"></span>
            </div>

            <!-- Complaint Description -->
            <div class="mb-3">
                <label asp-for="ComplaintDescription" class="form-label fw-semibold">Complaint Description</label>
                <input asp-for="ComplaintDescription" class="form-control" />
                <span asp-validation-for="ComplaintDescription" class="text-danger"></span>
            </div>

            <!-- Image Upload -->
            <div class="mb-3">
                <label class="form-label fw-semibold">Upload Image</label>
                <input type="file" id="imageUpload" class="form-control" accept="image/*" />
                <input type="hidden" asp-for="ImageBase64" id="ImageBase64" />
                <span asp-validation-for="ImageBase64" class="text-danger"></span> <!-- ✅ Add this line -->

            </div>

            <!-- Preview Existing Image -->
            <div class="mb-3">
                
                    <div class="d-flex align-items-center gap-3">
                        <img id="previewImage" src="data:image/png;base64,@Model.ImageBase64"
                        class="img-thumbnail" style="max-width: 200px; max-height: 200px;" />
                    <button type="button" id="removeImage" class="btn btn-outline-danger btn-sm" onclick="removeUploadedImage()">❌ Remove</button>
                    </div>
                
                
                    <p class="text-muted  no-image-text ">No image uploaded</p>
                
            </div>

            <!-- Main Problems -->
            <div class="mb-3 col-12">
                <label asp-for="SelectedMainProblems" class="form-label fw-semibold">Main Problems</label>
                <input asp-for="SelectedMainProblems" class="form-control" id="SelectedMainProblems" readonly />
                <input type="hidden" id="HiddenMainProblems" />
                <div id="mainProblemCheckboxes" class="mt-2">
                   
                    @foreach (var mainProblem in ViewBag.MainProblems)
                    {
                        <div class="form-check me-3">
                            <input type="checkbox" class="form-check-input main-problem-checkbox" value="@mainProblem.Value" id="main_@mainProblem.Value">
                            <label class="form-check-label" for="main_@mainProblem.Value">@mainProblem.Text</label>
                        </div>
                    
                    }
                </div>
            </div>

            <!-- Sub Problems (right under Main Problems) -->
            <div class="mb-3 col-12">
                <label asp-for="SelectedSubProblems" class="form-label fw-semibold">Sub Problems</label>
                <input asp-for="SelectedSubProblems" class="form-control" id="SelectedSubProblems" />
                <input type="hidden" id="HiddenSubProblems" value="@selectedSubProblems" />
                <div id="subProblemCheckboxes" class="mt-2"></div>
            </div>


            @if (userRole != "customer")
            {
                <!-- Role Selection -->
                <div class="mb-3 col-md-6">
                    <label for="Role" class="form-label fw-semibold">Assign To</label>
                    @{
                        var userRole = TempData["UserRole"]?.ToString() ?? "";
                    }

                <select class="form-select" id="roleDropdown" name="Role">
                    <option value="">Select</option>
                    <option value="Sparepart" selected="@(userRole == "Sparepart" ? "selected" : null)">Sparepart</option>
                    <option value="Service Engineer" selected="@(userRole == "Service Engineer" ? "selected" : null)">Service Engineer</option>
                    <option value="Field Engineer" selected="@(userRole == "Field Engineer" ? "selected" : null)">Field Engineer</option>
                </select>
                
            </div>

            }
            <!-- Submit & Back -->
            <div class="d-flex flex-column flex-sm-row justify-content-center align-items-center gap-3 mt-4">
                <input type="submit" value="Submit" class="btn btn-success px-5 me-3"
                       onclick="return confirm('Are you sure you want to submit?');" />

                @{
                    var role = Context.Session.GetString("Role") ?? "Unknown";
                }

                @if (role == "coordinator")
                {
                    <a asp-controller="ComplaintRegistrations" asp-action="Index" class="btn btn-primary px-4">Back to Coordinator Page</a>
                }
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>


  
          $(document).ready(function () {

                       var base64 = $("#previewImage").attr("src");

            if (!base64 || base64 === "data:image/png;base64," || base64.trim() === "") {
                // Image not present
                $("#previewImage").hide();
                $("#removeImage").hide();
                $(".no-image-text").show();
            } else {
                // Image is present
                $("#previewImage").show();
                $("#removeImage").show();
                $(".no-image-text").hide();
            }

                                 $("#imageUpload").change(function () {
                    var file = this.files[0];

                     console.log("File selected:", file);

                    $("#imageError").text("").hide();
                    $("#previewImage").hide();
                    $("#removeImage").hide();

                    if (file) {
                        var fileType = file.type;
                        var fileSize = file.size;

                   console.log("Original File Size:", fileSize, "bytes");

     var allowedTypes = ["image/jpeg", "image/png"];
                        if (!allowedTypes.includes(fileType)) {

                             console.error("Invalid file type!");

                            $("#imageError").text("Only JPG and PNG images are allowed.").show();
                            return;
                        }

                        var maxSize = 2 * 1024 * 1024; // 2MB
                        if (fileSize > maxSize) {
                            $("#imageError").text("File size must be less than 2MB.").show();
                            return;
                        }

                        var reader = new FileReader();
                        reader.onload = function (e) {
                            var img = new Image();
                            img.src = e.target.result;

                            img.onload = function () {
                                var canvas = document.createElement("canvas");
                                var ctx = canvas.getContext("2d");

                                var maxWidth = 100; // ✅ Reduced width
                                var maxHeight = 80; // ✅ Reduced height
                                var width = img.width;
                                var height = img.height;

                              console.log("Original Image Size:", width, "x", height);



                                if (width > height) {
                                    if (width > maxWidth) {
                                        height *= maxWidth / width;
                                        width = maxWidth;
                                    }
                                } else {
                                    if (height > maxHeight) {
                                        width *= maxHeight / height;
                                        height = maxHeight;
                                    }
                                }


                                canvas.width = width;
                                canvas.height = height;
                                ctx.drawImage(img, 0, 0, width, height);

                                // ✅ Convert to WebP for smaller Base64 size
                                canvas.toBlob(function (blob) {
                                    var compressedReader = new FileReader();
                                    compressedReader.onloadend = function () {
                                        var compressedBase64 = compressedReader.result.split(',')[1];



                                        $("#ImageBase64").val(compressedBase64);
                                        $("#previewImage").attr("src", compressedReader.result).show();
                                        $("#removeImage").fadeIn();
                                       $(".no-image-text").hide();  // ✅ Hide the "No image uploaded" text

                                    };
                                    compressedReader.readAsDataURL(blob);
                                }, "image/webp", 0.4); // ✅ WebP with 50% compression
                            };
                        };
                        reader.readAsDataURL(file);
                    }
                });

                $("#removeImage").click(function () {

                     console.log("Image removed!");

                    $("#ImageBase64").val("");
                    $("#previewImage").attr("src", "").hide();
                    $("#imageUpload").val("");
                    $("#removeImage").hide();
                    $(".no-image-text").show();  // ✅ Show it again when image is removed

                });

    let isLoaded = false;  // ✅ Flag to prevent duplicate calls

         
        let selectedMainProblemNames = $("#SelectedMainProblems").val().split(",").map(s => s.trim());

        $(".main-problem-checkbox").each(function () {
                    let checkboxText = $(this).next("label").text().trim(); // Label text displayed next to the checkbox


console.log("Main Problem Checkbox Text:", checkboxText);

            if (selectedMainProblemNames.includes(checkboxText)) {
                        $(this).prop("checked", true); // Tick the checkbox by default



            }
        });

                 updateSelectedMainProblems();

        // Sub problems will also be loaded when the page loads
                let selectedMainProblemIds = $(".main-problem-checkbox:checked").map(function () {
            return $(this).val();
        }).get();



        // Important to check `isLoaded` here first

            if (!isLoaded && selectedMainProblemIds.length > 0) {
            isLoaded = true;  // ✅ Flag set karo
            loadSubProblems(selectedMainProblemIds);
        }

console.log("🔍 Before API Call - HiddenSubProblems:", $("#HiddenSubProblems").val());


            function loadSubProblems(selectedMainProblems) {
                if (selectedMainProblems.length === 0) {
                    $("#subProblemCheckboxes").html("");
                    $("#SelectedSubProblems").val("");
                    $("#HiddenSubProblems").val("");

                    return;
                }

                         let previouslySelected = $(".sub-problem-checkbox:checked").map(function () {
                       return $(this).val();
                       }).get();


 
                $.ajax({
                    url: '@Url.Action("GetSubProblems", "ComplaintRegistrations")',
                    type: 'GET',
                    data: { mainProblemIds: selectedMainProblems },
                    traditional: true,  // ✅ Ensures list is passed properly
                    success: function (response) {

                        

            

                               
                         $("#subProblemCheckboxes").html("");

 
                        response.forEach(group => {
                            let mainProblemName = group.mainProblem;
                            let subProblems = group.subProblems;

                            $("#subProblemCheckboxes").append(`<strong>${mainProblemName}</strong><br>`);

                            subProblems.forEach(sp => {
                            let isChecked = previouslySelected.includes(sp.value) ? "checked" : ""; // ✅ Preserve checked state

                           let checkbox = `<div class="form-check">
                                    <input type="checkbox" class="form-check-input sub-problem-checkbox" value="${sp.value}" id="sub_${sp.value}" ${isChecked}>
                                    <label class="form-check-label" for="sub_${sp.value}">${sp.text}</label>
                                </div>`;
                                $("#subProblemCheckboxes").append(checkbox);
                            });
                        });


                        // ✅ Previously selected sub problems ko check karega
                        // let selectedSubProblems = $("#SelectedSubProblems").val().split(",");

                     let selectedSubProblems = $("#HiddenSubProblems").val().split(",").map(s => s.trim());



        //                  let checkboxValue = $(this).val().trim(); ✅ ID from checkbox
        //                      console.log("Checkbox Value:", checkboxValue.trim().toLowerCase());
        // console.log("HiddenSubProblems Array:", selectedSubProblems.map(sub => sub.trim().toLowerCase()));
        // console.log("Match Found:", selectedSubProblems.some(sub => sub.trim().toLowerCase() === checkboxValue.trim().toLowerCase()));

       $(".sub-problem-checkbox").each(function () {
                    let checkboxText = $(this).next("label").text().trim().replace(/_/g, " "); // Get label text of the checkbox


            let matchedSubproblem = selectedSubProblems.find(sub => sub.replace(/_/g, " ").trim().toLowerCase() === checkboxText.toLowerCase());


                    if (matchedSubproblem) {
                $(this).prop("checked", true);
                console.log("✔ Checked:", checkboxText);
            }
        });
                       // ✅ Selected sub-problems ko update karo
                    updateSelectedSubProblems();
                }
            });
        }

              $(".main-problem-checkbox").change(function () {

            let selectedNames = $(".main-problem-checkbox:checked").map(function () {
                return $(this).next("label").text(); // ✅ Main problem ka naam extract karega
            }).get();

             updateSelectedMainProblems();  // ✅ Call function to resize textbox dynamically

console.log("✅ Main Problem Changed, isLoaded Resetting...");
                isLoaded = false;  // ✅ Reset flag on change

            let selectedIds = $(".main-problem-checkbox:checked").map(function () {
                return $(this).val(); // ✅ IDs extract karega
            }).get();

            $("#SelectedMainProblems").val(selectedNames.join(","));  // ✅ Textbox me naam store karega
            $("#HiddenMainProblems").val(selectedIds.join(","));  // ✅ Hidden field me IDs store karega
             
               if (!isLoaded) {  // ✅ Ensure multiple calls avoid hoon
            isLoaded = true;
            loadSubProblems(selectedIds);
        }
        });

                    $(document).on("change", "#subProblemCheckboxes .sub-problem-checkbox", function () {
            updateSelectedSubProblems();
        });

        let subProblemInput = document.getElementById("SelectedSubProblems");

        // ✅ Ensure Textbox Adjusts on Load
        if (subProblemInput) {
            adjustWidth(subProblemInput);
        }

        // ✅ Jab user kuch type kare ya delete kare, toh width adjust karega
        $("#SelectedSubProblems").on("input", function () {
            adjustWidth(this);
        });

        // ✅ Checkbox selection ke baad bhi width adjust karega
        $(document).on("change", ".sub-problem-checkbox", function () {
            updateSelectedSubProblems();
        });

        function adjustWidth(input) {
            if (input) {
                let minWidth = 420; // Minimum width
                let newWidth = (input.value.length + 2) * 14; // Character width * 8px
                input.style.width = Math.max(newWidth, minWidth) + "px"; // Ensure minimum width
            }
        }


                function updateSelectedMainProblems() {

            let selectedTexts = $(".main-problem-checkbox:checked").map(function () {
                return $(this).next("label").text();
            }).get();

            let finalText = selectedTexts.length > 0 ? selectedTexts.join(", ")   :  " ";

            $("#SelectedMainProblems").val(finalText);
            $("#HiddenMainProblems").val($(".main-problem-checkbox:checked").map(function () { return $(this).val(); }).get().join(","));

            let inputField = document.getElementById("SelectedMainProblems");
            if (inputField) {
                adjustWidth(inputField);
            }
        }

                 function updateSelectedSubProblems() {


                let selectedTexts = $(".sub-problem-checkbox:checked").map(function () {
                    return $(this).next("label").text();
                }).get();


         let finalText = selectedTexts.length > 0 ? selectedTexts.join(",  ") : "";

                $("#SelectedSubProblems").val(finalText);

                let selectedValues = $(".sub-problem-checkbox:checked").map(function () {
                    return $(this).val();
                }).get();
                $("#HiddenSubProblems").val(selectedValues.join(","));

        // ✅ Immediately adjust width dynamically
         let inputField = document.getElementById("SelectedSubProblems");
         if (inputField) {
             adjustWidth(inputField);
         }


            }

                    // ✅ Function to dynamically resize textbox YAHA  YE SUBPROBLEM KI LENGTH BADHATA HAI 
        function adjustWidth(input) {
            let newWidth = input.value.length + 5; // ✅ Increase width based on text length
            input.style.width = newWidth + "ch"; // ✅ "ch" makes it adjust to character size
        }

        });

                          function showDropdown() {
            document.getElementById("roleDisplay").classList.add("d-none");
            document.getElementById("roleDropdown").classList.remove("d-none");
        }

        function updateRole() {
            var selectedRole = document.getElementById("roleDropdown").value;
            document.getElementById("roleDisplay").value = selectedRole;
            document.getElementById("roleDisplay").classList.remove("d-none");
            document.getElementById("roleDropdown").classList.add("d-none");
        }


                        function removeUploadedImage() {
         let previewImage = document.getElementById("previewImage");
            previewImage.src = "";
            previewImage.style.display = "none"; // ✅ Image ko completely hide karega 
            
            document.getElementById("ImageBase64").value = "";

         // ✅ Reset file input properly
            let imageInput = document.getElementById("imageUpload");
            imageInput.value = "";
            imageInput.type = "text";  // ✅ Force reset
            imageInput.type = "file";  // ✅ Re-enable file input
             $(".no-image-text").show();

        let removeBtn = document.getElementById("removeImage");
            if (removeBtn) {
                removeBtn.style.display = "none";
                       
                    }
         }
      
    </script>

}

