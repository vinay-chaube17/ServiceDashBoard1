 


@model ServiceDashBoard1.Models.User




@{
    ViewData["Title"] = "Reset Password";
}


<div class="container mt-5" style="max-width: 500px;">
    <div class="card border-warning shadow" style="max-width: 500px; height: 100%; overflow-y: auto; font-weight: bold;">
        <div class="card-header text-white text-center" style="background-color: gray;">
            <h4>Reset Password</h4>
        </div>
        <div class="card-body">
            <form asp-action="ResetPassword" method="post">

               @*  <div class="mb-3">
                    <label class="form-label">Enter OTP</label>
                    <input type="text" name="Otp" class="form-control" placeholder="Enter OTP" required />
                </div> *@

                <div class="mb-3">
                    <label class="form-label">Enter OTP</label>
                    <div class="d-flex gap-1 justify-content-center">
                        <input type="text" maxlength="1" class="form-control otp-input text-center" name="otp1" required />
                        <input type="text" maxlength="1" class="form-control otp-input text-center" name="otp2" required />
                        <input type="text" maxlength="1" class="form-control otp-input text-center" name="otp3" required />
                        <input type="text" maxlength="1" class="form-control otp-input text-center" name="otp4" required />
                        <input type="text" maxlength="1" class="form-control otp-input text-center" name="otp5" required />
                        <input type="text" maxlength="1" class="form-control otp-input text-center" name="otp6" required />
                    </div>
                    <input type="hidden" name="Otp" id="OtpFinal" />
                </div>


                <div class="mb-3">
                    <label class="form-label">New Password</label>
                    <input type="password" name="NewPassword" class="form-control" placeholder="New Password" required />
                </div>

                <div class="mb-3">
                    <label class="form-label">Confirm Password</label>
                    <input type="password" name="ConfirmPassword" class="form-control" placeholder="Confirm Password" required />
                </div>

                <div class="d-flex gap-3">
                    <button type="submit" class="btn" style="font-weight: bold; width: 150px; padding: 10px; font-size: 16px; background-color: gray; color: white;">
                        Reset
                    </button>

                    <a asp-controller="Users" asp-action="Login" class="btn btn-primary" style="width: 150px; padding: 10px; font-size: 16px;">
                        Back to Login
                    </a>
                </div>

                <div class="text-center mt-3">
                    <img src="~/images/SilLOGO.png" alt="Logo" style="max-height: 110px;" />
                </div>

            </form>
        </div>
    </div>
</div>

@section NoFooter {
}

@section Scripts {
    <script>
        // Show OTP if available
              var otp = '@TempData["OtpForTesting"]';
        if (otp) {
            alert("Your OTP is: " + otp);
        }

        const inputs = document.querySelectorAll('.otp-input');
        const hiddenOtpInput = document.getElementById('OtpFinal');

        inputs.forEach((input, index) => {
            input.addEventListener('input', () => {
                if (input.value.length === 1 && index < inputs.length - 1) {
                    inputs[index + 1].focus();
                }
                updateHiddenOtp();
            });

            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && input.value === '' && index > 0) {
                    inputs[index - 1].focus();
                }
            });
        });

                function updateHiddenOtp() {
            const otp = Array.from(inputs).map(i => i.value).join('');
            hiddenOtpInput.value = otp;

            // ✅ When 6-digit OTP is filled, fetch and auto-fill password
            if (otp.length === 6) {
                $.post("/Users/GeneratePasswordAfterOtp", function (data) {
                    if (data.success) {
                        $("input[name='NewPassword']").val(data.password);
                        $("input[name='ConfirmPassword']").val(data.password);
                    } else {
                        alert(data.message);
                    }
                });
            }
        }

        // ✅ Password check on form submission
        document.querySelector("form").addEventListener("submit", function (e) {
            const newPassword = document.querySelector("input[name='NewPassword']").value;
            const confirmPassword = document.querySelector("input[name='ConfirmPassword']").value;

          


            const passwordRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@@$!%*?&]).{8,}$/;

            if (newPassword !== confirmPassword) {
                  console.log("not matched");
            
                alert("Passwords do not match!");
                e.preventDefault();
                return;
            }

                   if (!passwordRegex.test(newPassword) || !passwordRegex.test(confirmPassword)) {
            console.log("Password does not follow the rule");

            alert("Password must be at least 8 characters and include uppercase, lowercase, number, and special character.");
            e.preventDefault();
            return;
        }
        });
    </script>

    @await Html.PartialAsync("_ValidationScriptsPartial")
}
